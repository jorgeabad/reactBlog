{"version":3,"sources":["logo.svg","postList.js","requestApi.js","home.js","post.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["modulos","posts","console","log","nombres","map","post","modulo","reduce","unique","item","includes","temas","tema","listaPorTemas","url","nombreTema","filter","PostsPorTema","titulo","img","Col","Card","style","width","to","_id","state","Img","variant","src","Body","Title","Text","descripcion","PostsList","Container","m","postEnmodulo","nombreModulo","PostsPorModulo","t","Row","xs","md","className","useRequestApi","useState","data","setData","useEffect","axios","get","then","response","catch","error","Home","title","transformImageUri","input","test","decodeURIComponent","PostContenido","useLocation","autor","children","contenido","components","code","node","inline","props","match","exec","String","replace","dark","language","PreTag","App","path","element","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5b6c0513.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { Link } from \"react-router-dom\";\r\nimport './App.css';\r\nimport { Card, Row, Col, Container, CardGroup } from \"react-bootstrap\";\r\n\r\n/*const PostsList = ({ posts }) => {\r\n  return (\r\n    <div>\r\n        \r\n      {posts.map((post) => (\r\n        \r\n        <div key={post._id}>\r\n          <Link\r\n            to= {`/blogs/${post._id}`}\r\n              state={post} \r\n        \r\n          >\r\n            <h2>{post.titulo}</h2>\r\n            <p>Escrito por {post.autor}</p>\r\n          </Link>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};*/\r\n\r\nconst modulos = function (posts) {\r\n  console.log(posts);\r\n  const nombres = posts.map(function (post) {\r\n    return post.modulo;\r\n  });\r\n  console.log(nombres);\r\n  return nombres.reduce(\r\n    (unique, item) => (unique.includes(item) ? unique : [...unique, item]),\r\n    []\r\n  );\r\n};\r\n\r\nconst temas = function (posts) {\r\n  console.log(posts);\r\n  const nombres = posts.map(function (post) {\r\n    return post.tema;\r\n  });\r\n  console.log(nombres);\r\n  return nombres.reduce(\r\n    (unique, item) => (unique.includes(item) ? unique : [...unique, item]),\r\n    []\r\n  );\r\n};\r\n\r\nconst PostsPorModulo = function (posts, nombreModulo) {\r\n  console.log(\"postpormodulo\", posts);\r\n  return posts.filter((post) => post.modulo === nombreModulo);\r\n};\r\n\r\nconst PostsPorTema = function (posts, nombreTema) {\r\n  console.log(\"postpormodulo\", posts);\r\n  return posts.filter((post) => post.tema === nombreTema);\r\n};\r\n\r\nfunction listaPorTemas(url, posts, tema) {\r\n  return PostsPorTema(posts, tema).map(function (post) {\r\n    console.log(tema);\r\n    console.log(post.titulo);\r\n    let img=post.img?post.img:'/img/inicio.jpg'\r\n    return (\r\n      <Col>\r\n      <Card key={post._id} style={{ width: \"18rem\" }}>\r\n        <Link to={`blogs/${post._id}`} state={post}>\r\n          <Card.Img variant=\"top\" src={\"https://jorge-abad.es\" + img} />\r\n          <Card.Body>\r\n            <Card.Title>{post.titulo}</Card.Title>\r\n            <Card.Text>{post.descripcion}</Card.Text>\r\n          </Card.Body>\r\n        </Link>\r\n      </Card>\r\n      </Col>\r\n    );\r\n  });\r\n}\r\n\r\n\r\n/**<CardGroup> {listaPorTemas(url, postEnmodulo,t)}</CardGroup> */\r\n\r\nconst PostsList = ({ url, posts }) => {\r\n  return (\r\n    <Container>\r\n         \r\n      {modulos(posts).map(function (m) {\r\n        const postEnmodulo = PostsPorModulo(posts, m);\r\n        return (\r\n          <div key={m}>\r\n            <h2>Modulo: {m}</h2>\r\n            {temas(postEnmodulo).map(function (t) {\r\n              return (\r\n                <div key={t}>\r\n                  <h3>Tema: {t}</h3>\r\n                  <Row xs={1} md={4} className=\"g-4\">\r\n                    {listaPorTemas(url, postEnmodulo,t)}\r\n                  </Row>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    \r\n    </Container>\r\n\r\n  );\r\n};\r\n\r\n/*\r\nconst PostsList = ({ posts }) => {\r\n  return (\r\n    <div>\r\n      {posts.map(function (post) {\r\n        let nm = false;\r\n\r\n        if (modulo !== post.modulo) {\r\n          modulo = post.modulo;\r\n          nm = true;\r\n          console.log(modulo);\r\n        } else {\r\n          nm = false;\r\n        }\r\n        return (\r\n          \r\n          <div>\r\n            {nm && <div>{modulo}</div>}\r\n  \r\n\r\n            <div key={post._id}>\r\n              <Link to={`/blogs/${post._id}`} state={post}>\r\n                <h2>{post.titulo}</h2>\r\n                <p>Escrito por {post.autor}</p>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};*/\r\n\r\nexport default PostsList;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useRequestApi = (url) => {\r\n    const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n      axios.get(url)\r\n      .then(response => {\r\n         console.log(\"Success in fetching the file from \" + url);\r\n         console.log(response.data);\r\n         setData(response.data);\r\n      })\r\n      .catch(error => {\r\n         console.error(\"Error in fetching the file from \" + url);\r\n      });\r\n  }, [url,setData]);\r\n    \r\n\r\n    return {url, data};\r\n}\r\n\r\nexport default useRequestApi;","import PostsList from './postList';\r\nimport useRequestApi from './requestApi';\r\n\r\nconst Home = () => {\r\n    const {data: posts} = useRequestApi('https://jorge-abad.es/publicaciones/categoria/tutorialNode');\r\n    console.log(posts);\r\n\r\n    return ( \r\n        <div>\r\n            <PostsList posts={ posts} title=\"Todos los Posts\"/>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Home;","\r\nimport { useLocation } from 'react-router-dom'\r\nimport React from 'react'\r\nimport ReactMarkdown from 'react-markdown';\r\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\r\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nconst transformImageUri = input =>\r\n  /^https?:/.test(input)\r\n    ? input\r\n    : (decodeURIComponent(`https://jorge-abad.es${input}`))\r\n\r\nconst PostContenido = function() {\r\n\r\n    const location = useLocation()\r\n    const post  = location.state\r\n\r\n    return ( \r\n      <Container>\r\n\r\n      \r\n        <div>\r\n        <article >\r\n            <h2>{post.titulo}</h2>\r\n            <p>Escrito por {post.autor}</p>\r\n            \r\n        </article>\r\n    </div>,\r\n        <ReactMarkdown children={post.contenido} \r\n        transformImageUri={transformImageUri}\r\n          components={{\r\n            code({node, inline, className, children, ...props}) {\r\n              const match = /language-(\\w+)/.exec(className || '')\r\n              return !inline && match ? (\r\n                <SyntaxHighlighter\r\n                  children={String(children).replace(/\\n$/, '')}\r\n                  style={dark}\r\n                  language={match[1]}\r\n                  PreTag=\"div\"\r\n                  {...props}\r\n                />\r\n              ) : (\r\n                <code className={className} {...props}>\r\n                  {children}\r\n                </code>\r\n              )\r\n            }\r\n          }}/>\r\n\r\n</Container>\r\n     );\r\n}\r\n\r\n\r\nexport default PostContenido;","import React from 'react';\nimport logo from './logo.svg';\nimport Home from './home';\nimport PostContenido from './post';\n//import './App.css';\nimport { BrowserRouter as Router, Route, Routes, Switch} from 'react-router-dom'; \nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Router>\n      <Routes>\n      \n    \n      <Route path=\"reactblog/blogs/:_id\" element={<PostContenido/>}>\n  \n              \n            </Route>\n     \n            <Route path=\"reactblog/\" element={<Home/>}>\n  \n              \n  </Route>\n\n     \n      </Routes>\n      \n      </Router>\n            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}